import re
import random
import openai
import asyncio
from telethon import TelegramClient, events, functions, types
from textblob import TextBlob
from utils import (
    analyze_ticker,
    generate_ai_comment,
    update_feedback,
    summarize_post,
    translate_post,
    predict_market_sentiment,
    generate_catchy_title
)
from tinydb import TinyDB
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

api_id = os.getenv("API_ID")
api_hash = os.getenv("API_HASH")
openai_api_key = os.getenv("OPENAI_API_KEY")
bot_token = os.getenv("BOT_TOKEN")
channel_username = os.getenv("CHANNEL_USERNAME", "smartprofittrading").lstrip("@")

if not all([api_id, api_hash, openai_api_key, bot_token]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: API_ID, API_HASH, OPENAI_API_KEY –∏–ª–∏ BOT_TOKEN")

openai.api_key = openai_api_key

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞
client = TelegramClient('smartprofit_bot', int(api_id), api_hash).start(bot_token=bot_token)

db = TinyDB('storage.json')
reaction_emojis = ['üëç', 'üî•', '‚ù§Ô∏è', 'üëè']
TICKER_REGEX = r"[A-Z]{2,5}(USDT|USD|EUR|BTC)?"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    print(f"Start from {event.sender_id}")
    await event.respond("üëã –ü—Ä–∏–≤–µ—Ç! –Ø SmartProfitBot. –û—Ç–ø—Ä–∞–≤—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è –∑–¥–µ—Å—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
@client.on(events.NewMessage(chats=channel_username))
async def handle_new_post(event):
    post = event.message.message
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ: {post}")

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    polarity = TextBlob(post).sentiment.polarity
    print(f"–ü–æ–ª—è—Ä–Ω–æ—Å—Ç—å: {polarity}")

    # –ü–æ—Ä–æ–≥ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî —Å–µ–π—á–∞—Å 0.0, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if polarity < 0.0:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        return

    # –ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ä–∞
    ticker_match = re.search(TICKER_REGEX, post)
    ticker_info = analyze_ticker(ticker_match.group(0)) if ticker_match else ""

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
    delay = random.randint(30, 90)
    print(f"–ñ–¥—ë–º {delay} —Å–µ–∫...")
    await asyncio.sleep(delay)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    style = db.table('styles').get(doc_id=1) or {"mode": "default"}
    comment = generate_ai_comment(post, ticker_info, style.get("mode"))

    # –î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏
    summary = summarize_post(post)
    translation = translate_post(post, "en")
    prediction = predict_market_sentiment(post)
    catchy_title = generate_catchy_title(post)

    full_comment = (
        f"üí° *AI-—Ä–µ–∑—é–º–µ*: {summary}\n"
        f"üåê *–ü–µ—Ä–µ–≤–æ–¥*: {translation}\n"
        f"üìä *–ü—Ä–æ–≥–Ω–æ–∑*: {prediction}\n"
        f"üß† *–ó–∞–≥–æ–ª–æ–≤–æ–∫*: {catchy_title}\n\n"
        f"‚úçÔ∏è *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–æ—Ç–∞*: {comment}"
    )

    try:
        await client.send_message(
            entity=event.chat_id,
            message=full_comment,
            reply_to=event.message.id,
            parse_mode="markdown"
        )
        print("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")

    # –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
    if random.random() < 0.5:
        try:
            await client(functions.messages.SendReactionRequest(
                peer=event.chat_id,
                msg_id=event.message.id,
                reaction=[types.ReactionEmoji(emoticon=random.choice(reaction_emojis))]
            ))
            print("–†–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

    update_feedback(db, comment)

print("SmartProfitBot –∑–∞–ø—É—â–µ–Ω...")
client.run_until_disconnected()
