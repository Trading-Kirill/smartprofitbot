import re
import random
import openai
import asyncio
from telethon import TelegramClient, events, functions, types
from textblob import TextBlob
from utils import analyze_ticker, generate_ai_comment, update_feedback
from tinydb import TinyDB, Query
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_id = os.getenv("API_ID")
api_hash = os.getenv("API_HASH")
openai_api_key = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not api_id or not api_hash or not openai_api_key:
    raise EnvironmentError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: API_ID, API_HASH –∏–ª–∏ OPENAI_API_KEY")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –¥–ª—è OpenAI
openai.api_key = openai_api_key

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram
client = TelegramClient('smartprofit_bot', api_id, api_hash)
channel_username = 'smartprofittrading'

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö TinyDB
db = TinyDB('storage.json')

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
reaction_emojis = ['üëç', 'üî•', '‚ù§Ô∏è', 'üëè']

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
TICKER_REGEX = r"[A-Z]{2,5}(USDT|USD|EUR|BTC)?"

@client.on(events.NewMessage(chats=channel_username))
async def handle_new_post(event):
    post = event.message.message
    if not post:
        return

    # –û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if TextBlob(post).sentiment.polarity < 0.1:
        return

    # –ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ä–∞
    ticker_match = re.search(TICKER_REGEX, post)
    ticker_info = ""
    if ticker_match:
        ticker = ticker_match.group(0)
        ticker_info = analyze_ticker(ticker)

    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
    await asyncio.sleep(random.randint(30, 90))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    style = db.table('styles').get(doc_id=1) or {"mode": "default"}
    comment = generate_ai_comment(post, ticker_info, style.get("mode", "default"))

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await client.send_message(
            entity=event.message.to_id,
            message=comment,
            reply_to=event.message.id
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50%
    if random.random() < 0.5:
        try:
            await client(functions.messages.SendReactionRequest(
                peer=event.message.to_id,
                msg_id=event.message.id,
                reaction=[types.ReactionEmoji(emoticon=random.choice(reaction_emojis))]
            ))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_feedback(db, comment)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
with client:
    print("SmartProfitBot –∑–∞–ø—É—â–µ–Ω...")
    client.run_until_disconnected()
